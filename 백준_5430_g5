#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <deque>
#include <queue>
#include <string> // string(stoi, stof ...)
#include <sstream> //stringstream

using namespace std;


int main()
{
    int T, n;
    cin >> T;

    for (int i = 0; i < T; i++)
    {
        string p;
        string arr;
        vector <char> func;
        vector <int> number;

        cin >> p; // R or D
        cin >> n; // 수의 개수
        cin >> arr; // [x1,...xn]

        deque<int> dq;
        string tmp_num = "";

        // 데크 사용
        for (char ch : arr)
        {
            if (isdigit(ch))
            {
                tmp_num += ch;
            }
            else if (ch == ',' || ch == ']')
            {
                if (tmp_num.empty() == false)
                {
                    dq.push_back(stoi(tmp_num));
                    tmp_num = ""; // 초기화
                }
            }
        }

        /*  vector 사용시 런타임에러 발생
        for (int j = 0; j < p.length(); j++) // 계산 함수 vector에 저장
        {
            func.push_back(p[j]);
        }

        arr.erase(arr.find('['), 1);
        arr.erase(arr.find(']'), 1);

        stringstream ss(arr);;


        while (getline(ss, tmp_num, ',')) // stringstream을 받아서 ' , ' 전까지의 수를 tmp_num에 저장
        {
            number.push_back(stoi(tmp_num));
        }

        bool error_flag = false;

        for (int j = 0; j < func.size(); j++)
        {
            if (func[j] == 'R')
            {
                reverse(number.begin(), number.end()); // R이면 뒤집음
            }
            else if (func[j] == 'D')
            {
                if (number.empty() == true)
                {
                    error_flag = true;
                    break;
                }
                number.erase(number.begin());
            }
        }

        if (error_flag == true)
        {
            cout << "error" << endl;
        }
        else
        {
            cout << '[' << number[0];
            for (int j = 1; j < number.size(); j++)
            {
                cout << ',' << number[j];
            }
            cout << ']' << endl;
        }
        */

        bool reverse_flag = false;
        bool error_flag = false;

        for (char ch : p)
        {
            if (ch == 'R') // 실제로 안뒤집고 flag로만 판단, 시간복잡도 줄이기
            {
                reverse_flag = !reverse_flag;
            }
            else if (ch == 'D')
            {
                if (dq.empty() == true)
                {
                    error_flag = true;
                    break;
                }
                else
                {
                    if (reverse_flag == true) // 역행이면 뒤를뺌 
                    {
                        dq.pop_back();
                    }
                    else
                    {
                        dq.pop_front(); // 현재 정방향이면 앞에 있는거를 뺌
                    }
                }
            }
        }

        if (error_flag == true)
        {
            cout << "error" << endl;
        }
        else
        {
            cout << "[";
            if (dq.empty() == false) // 중요, 데크에 원소가 있을때만 이를 행함
            {
                if (reverse_flag == true)
                {
                    cout << *dq.rbegin();
                    dq.pop_back();
                    for (auto i = dq.rbegin(); i != dq.rend(); i++)
                    {
                        cout << "," << *i;
                    }
                }
                else
                {
                    cout << *dq.begin();
                    dq.pop_front();
                    for (auto i = dq.begin(); i != dq.end(); i++)
                    {
                        cout << "," << *i;
                    }
                }
            }
            cout << "]" << endl;
        }
    }

    return 0;
}
