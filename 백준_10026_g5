#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
#include <deque>
#include <queue>

using namespace std;

char RGB[101][101];
char _RGB[101][101]; // 적록색맹용 RGB 지역
int visit[101][101];
int N;

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

bool blind_mode;

// 일반용 DFS
void DFS(int x, int y, char color) 
{
    visit[x][y] = true;

    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        // 유효한 범위 내에 있는지 확인하고, 같은 색상인지 확인
        if ((nx >= 0 && nx < N) && (ny >= 0 && ny < N)) 
        {
            if (visit[nx][ny] == false && RGB[nx][ny] == color) 
            {
                DFS(nx, ny, color);
            }
        }
    }
}

// 적록색맹용 DFS
void blind_DFS(int x, int y, char color)
{
    visit[x][y] = true;

    for (int i = 0; i < 4; i++) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        // 유효한 범위 내에 있는지 확인하고, 같은 색상인지 확인
        if ((nx >= 0 && nx < N) && (ny >= 0 && ny < N))
        {
            if (visit[nx][ny] == false)
            {
                if (color == 'R' || color == 'G')
                {
                    if (_RGB[nx][ny] == 'R' || _RGB[nx][ny] == 'G')
                    {
                        blind_DFS(nx, ny, color);
                    }
                }
                else
                {
                    if (_RGB[nx][ny] == color)
                    {
                        blind_DFS(nx, ny, color);
                    }
                }
            }
        }
    }
}

int count() // 지역 count 함수
{
    int count = 0;
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            if (visit[i][j] == false)
            {
                if (blind_mode == true) // 적록색맹 mode
                {
                    blind_DFS(i, j, RGB[i][j]); // 해당지역과 같은 색인 지역, 다른색인 지역 count
                    count++;
                }
                else // 일반인 mode
                {
                    DFS(i, j, RGB[i][j]);
                    count++;
                }
            }
        }
    }

    return count;
}

int main()
{
    cin >> N;

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            char c;
            cin >> c;
            RGB[i][j] = c;
            _RGB[i][j] = c;
        }
    }

    blind_mode = false;
    int not_RG_blind = count();
    cout << not_RG_blind << " ";


    blind_mode = true;
    for (int i = 0; i < N; i++) // visit 초기화
    {
        for (int j = 0; j < N; j++)
        {
            visit[i][j] = false;
        }
    }
    int _RG_blind = count();
    cout << _RG_blind << endl;

    return 0;
}
